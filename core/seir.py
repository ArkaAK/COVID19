# -*- coding: utf-8 -*-
"""epidemic_calculator_merger.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/10UVR-rBep0fJV-31Ndb2G4Uq2orDczGt
"""
import random
import plotly.graph_objects as go
import numpy as np
from operator import itemgetter
import json

from scrap import states
from visuals.layouts import get_bar_layout

temp = list(states.apply(lambda x :"{" +"\"pop\":{},\"t0\":{},\"city\":\"{}\"".format(x.Population,x.TNaught,x.States)+ ",\"age_groups\":{\"overall\": {\"pop_frac\":1}}}",axis=1 ))
node_json_list =  [json.loads(node_json) for node_json in temp]
# node1_json = '{"pop":1900000,"age_groups":{"overall": {"pop_frac":1, "nodal_param_change":[{"intervention_day":30,"rates":0.25,"delI":100}]}}}';
# node2_json = '{"pop":2500000,"age_groups":{"overall": {"pop_frac":1}}}';
# node3_json = '{"pop":3000000,"t0":30,"age_groups":{"overall": {"pop_frac":1}}}';
#
# node1_local_config = json.loads(node1_json);
# node2_local_config = json.loads(node2_json);
# node3_local_config = json.loads(node3_json);
# node_json_list = [node1_local_config, node2_local_config, node3_local_config]


def dfdt(f, D_incubation, D_infectious, D_recovery_mild, D_hospital_lag, D_recovery_severe, D_death, P_SEVERE, CFR,
         rate):
    S, E, I, R, Mild, Severe, Severe_H, Fatal, R_Mild, R_Severe, R_Fatal = f[0], f[1], f[2], f[3], f[4], f[5], f[6], f[
        7], f[8], f[9], f[10]
    beta = rate / (D_infectious)
    a = 1 / D_incubation
    gamma = 1 / D_infectious

    p_severe = P_SEVERE
    p_fatal = CFR
    p_mild = 1 - P_SEVERE - CFR

    dS = -beta * I * S
    dE = beta * I * S - a * E
    dI = a * E - gamma * I
    dR = gamma * I
    dMild = p_mild * gamma * I - (1 / D_recovery_mild) * Mild
    dSevere = p_severe * gamma * I - (1 / D_hospital_lag) * Severe
    dSevere_H = (1 / D_hospital_lag) * Severe - (1 / D_recovery_severe) * Severe_H
    dFatal = p_fatal * gamma * I - (1 / D_death) * Fatal
    dR_Mild = (1 / D_recovery_mild) * Mild
    dR_Severe = (1 / D_recovery_severe) * Severe_H
    dR_Fatal = (1 / D_death) * Fatal
    return np.array([dS, dE, dI, dR, dMild, dSevere, dSevere_H, dFatal, dR_Mild, dR_Severe, dR_Fatal])


# Finds value of y for a given x using step size h
# and initial value y0 at x0.
def rungeKutta(dfdt, f0, D_incubation, D_infectious, D_recovery_mild, D_hospital_lag, D_recovery_severe, D_death,
               P_SEVERE, CFR, pop, rate, t0, t, n=20, dt=1):
    # n = Count number of iterations using step size  or
    # step height h
    h = dt / n
    n = int((t - t0) / h)
    # print('No of interpolation steps',n, ' and h =',h)
    # Iterate for number of iterations
    f0 = np.array(f0)
    f = f0 / pop
    T, S, E, I, R, Mild, Severe, Severe_H, Fatal, R_Mild, R_Severe, R_Fatal = [], [], [], [], [], [], [], [], [], [], [], []
    for iteration in range(1, n + 1):

        "Apply Runge Kutta Formulas to find next value of y"
        k1 = h * dfdt(f, D_incubation, D_infectious, D_recovery_mild, D_hospital_lag, D_recovery_severe, D_death,
                      P_SEVERE, CFR, rate)
        k2 = h * dfdt(f + 0.5 * k1, D_incubation, D_infectious, D_recovery_mild, D_hospital_lag, D_recovery_severe,
                      D_death, P_SEVERE, CFR, rate)
        k3 = h * dfdt(f + 0.5 * k2, D_incubation, D_infectious, D_recovery_mild, D_hospital_lag, D_recovery_severe,
                      D_death, P_SEVERE, CFR, rate)
        k4 = h * dfdt(f + k3, D_incubation, D_infectious, D_recovery_mild, D_hospital_lag, D_recovery_severe, D_death,
                      P_SEVERE, CFR, rate)

        # Update next value of y
        f = f + (1.0 / 6.0) * (k1 + 2 * k2 + 2 * k3 + k4)
        # Update next value of x
        t0 = t0 + h

        if iteration % 20 == 0:
            T.append(round(t0))
            S.append(round(f[0] * pop))
            E.append(round(f[1] * pop))
            I.append(round(f[2] * pop))
            R.append(round(f[3] * pop))
            Mild.append(round(f[4] * pop))
            Severe.append(round(f[5] * pop))
            Severe_H.append(round(f[6] * pop))
            Fatal.append(round(f[7] * pop))
            R_Mild.append(round(f[8] * pop))
            R_Severe.append(round(f[9] * pop))
            R_Fatal.append(round(f[10] * pop))
    return T, S, E, I, R, Mild, Severe, Severe_H, Fatal, R_Mild, R_Severe, R_Fatal


def getSolution(dfdt, pop, t0, days, group):
    if t0 == 0:
        T, S, E, I, R, Mild, Severe, Severe_H, Fatal, R_Mild, R_Severe, R_Fatal, intervention = [], [], [], [], [], [], [], [], [], [], [], [], []
    else:
        T, S, E, I, R, Mild, Severe, Severe_H, Fatal, R_Mild, R_Severe, R_Fatal, intervention = list(
            np.arange(t0) + 1), [0] * t0, [0] * t0, [0] * t0, [0] * t0, [0] * t0, [0] * t0, [0] * t0, [0] * t0, [
                                                                                                    0] * t0, [0] * t0, [
                                                                                                    0] * t0, [0] * t0
    global D_incubation, D_infectious, I0, R0, E0, Mild0, Severe0, Severe_H0, Fatal0, R_Mild0, R_Severe0, R_Fatal0, \
        D_death, P_SEVERE, D_hospital_lag, D_recovery_severe, \
        D_recovery_mild, CFR, rates, param_list, S0, delI, delS, delE, delR, rate_frac

    D_incubation, D_infectious, I0, R0, E0, Mild0, Severe0, Severe_H0, Fatal0, R_Mild0, R_Severe0, R_Fatal0, \
    D_death, P_SEVERE, D_hospital_lag, D_recovery_severe, \
    D_recovery_mild, CFR, rates, param_list, nodal_param_change, S0, delI, delS, delE, delR, rate_frac = itemgetter(
        "D_incubation", "D_infectious", "I0", "R0", "E0", "Mild0", "Severe0", "Severe_H0", \
        "Fatal0", "R_Mild0", "R_Severe0", "R_Fatal0", "D_death", "P_SEVERE", "D_hospital_lag", \
        "D_recovery_severe", "D_recovery_mild", "CFR", "rates", "param", "nodal_param_change", "S0", "delI", "delS",
        "delE", "delR", "rate_frac")(group)
    try:
        param_list = merge_dict(param_list, nodal_param_change)
    except:
        pass
    # print(param_list)
    if S0 <= 0:
        S0 = pop - E0 - I0 - R0
    for index in range(0, len(param_list)):
        if index > 0:
            t0 = intervention_day
            intervention = intervention + [t0]
            try:
                rates = rates * rate_frac
                rate_frac = 1
            except:
                pass
            try:
                # print(I0,delI)
                I0 = I0 + delI
                delI = 0
            except:
                pass
            try:
                S0 = S0 + delS
                delS = 0
            except:
                pass
            try:
                E0 = E0 + delE
                delE = 0
            except:
                pass
            try:
                R0 = S0 + delR
                delR = 0
            except:
                pass

        # try:
        # print(t0,'\t', param_list[index]['intervention_day'],'\t',I0)
        # except:
        # pass
        T0, S0, E0, I0, R0, Mild0, Severe0, Severe_H0, Fatal0, R_Mild0, R_Severe0, R_Fatal0 = rungeKutta(dfdt,
                                                                                                         [S0, E0, I0,
                                                                                                          R0, Mild0,
                                                                                                          Severe0,
                                                                                                          Severe_H0,
                                                                                                          Fatal0,
                                                                                                          R_Mild0,
                                                                                                          R_Severe0,
                                                                                                          R_Fatal0],
                                                                                                         D_incubation,
                                                                                                         D_infectious,
                                                                                                         D_recovery_mild,
                                                                                                         D_hospital_lag,
                                                                                                         D_recovery_severe,
                                                                                                         D_death,
                                                                                                         P_SEVERE, CFR,
                                                                                                         pop, rates, t0,
                                                                                                         param_list[
                                                                                                             index][
                                                                                                             'intervention_day'])
        T, S, E, I, R, Mild, Severe, Severe_H, Fatal, R_Mild, R_Severe, R_Fatal, = T + T0, S + S0, E + E0, I + I0, R + R0, Mild + Mild0, Severe + Severe0, Severe_H + Severe_H0, Fatal + Fatal0, R_Mild + R_Mild0, R_Severe + R_Severe0, R_Fatal + R_Fatal0
        globals().update(param_list[index])
        T0, S0, E0, I0, R0, Mild0, Severe0, Severe_H0, Fatal0, R_Mild0, R_Severe0, R_Fatal0 = T[-1], S[-1], E[-1], I[
            -1], R[-1], Mild[-1], Severe[-1], Severe_H[-1], Fatal[-1], R_Mild[-1], R_Severe[-1], R_Fatal[-1]

    if intervention_day < days:
        intervention = intervention + [intervention_day]
        T0, S0, E0, I0, R0, Mild0, Severe0, Severe_H0, Fatal0, R_Mild0, R_Severe0, R_Fatal0 = rungeKutta(dfdt,
                                                                                                         [S0, E0, I0,
                                                                                                          R0, Mild0,
                                                                                                          Severe0,
                                                                                                          Severe_H0,
                                                                                                          Fatal0,
                                                                                                          R_Mild0,
                                                                                                          R_Severe0,
                                                                                                          R_Fatal0],
                                                                                                         D_incubation,
                                                                                                         D_infectious,
                                                                                                         D_recovery_mild,
                                                                                                         D_hospital_lag,
                                                                                                         D_recovery_severe,
                                                                                                         D_death,
                                                                                                         P_SEVERE, CFR,
                                                                                                         pop, rates,
                                                                                                         intervention_day,
                                                                                                         days)
        T, S, E, I, R, Mild, Severe, Severe_H, Fatal, R_Mild, R_Severe, R_Fatal = T + T0, S + S0, E + E0, I + I0, R + R0, Mild + Mild0, Severe + Severe0, Severe_H + Severe_H0, Fatal + Fatal0, R_Mild + R_Mild0, R_Severe + R_Severe0, R_Fatal + R_Fatal0

    return np.array(S[:days]), np.array(E[:days]), np.array(I[:days]), np.array(R[:days]), np.array(
        Mild[:days]), np.array(Severe[:days]), np.array(Severe_H[:days]), np.array(Fatal[:days]), np.array(
        R_Mild[:days]), np.array(R_Severe[:days]), np.array(R_Fatal[:days]), param_list


def plot_graph(T, S, E, I, R, Mild, Severe, Severe_H, Fatal, R_Mild, R_Severe, R_Fatal, interventions, days, t0, city):
    ht = '''%{fullData.name}	<br> &#931; :%{y:}<br> &#916;: %{text}<br> Day :%{x:} <extra></extra>'''
    trace1 = go.Bar(x=T[:days], y=E[:days], name='Exposed &nbsp; &nbsp; ', text=np.diff(E[:days]),
                    marker=dict(color='rgb(253,192,134,0.2)'), hovertemplate=ht)
    trace2 = go.Bar(x=T[:days], y=I[:days], name='Infectious &nbsp; &nbsp;', text=np.diff(I[:days]),
                    marker=dict(color='rgb(240,2,127,0.2)'), hovertemplate=ht)
    trace3 = go.Bar(x=T[:days], y=Severe_H[:days], name='Hospitalized', text=np.diff(Severe_H[:days]),
                    marker=dict(color='rgb(141,160,203,0.2)'), hovertemplate=ht)
    trace4 = go.Bar(x=T[:days], y=R_Fatal[:days], name='Fatalities &nbsp; &nbsp; &nbsp;', text=np.diff(R_Fatal[:days]),
                    marker=dict(color='rgb(56,108,176,0.2)'), hovertemplate=ht)

    data = [trace1, trace2, trace3, trace4]
    if city != "India":
        for intervention in interventions:
            hover_text = ""
            for key, value in intervention.items():
                hover_text += str(key) + ' : ' + str(value) + '<br>'
            it = go.Scatter(y=[0, (max(E) + max(I) + max(Severe_H) + max(R_Fatal))],
                            x=[intervention["intervention_day"], intervention["intervention_day"]],
                            mode='lines',
                            showlegend=False,
                            text=hover_text,
                            hoverinfo="text")
            data.append(it)

    layout = get_bar_layout(city)

    return {"data": data[::-1], "layout": layout}


def epidemic_calculator(Config, days):
    S, E, I, R, Mild, Severe, Severe_H, Fatal, R_Mild, R_Severe, R_Fatal = np.array([0] * days), np.array(
        [0] * days), np.array([0] * days), np.array([0] * days), np.array([0] * days), np.array([0] * days), np.array(
        [0] * days), np.array([0] * days), np.array([0] * days), np.array([0] * days), np.array([0] * days)
    t0 = Config.t0
    for age_group in Config.age_group_dict:
        group = Config.age_group_dict[age_group]
        pop = Config.pop * group['pop_frac']
        S0, E0, I0, R0, Mild0, Severe0, Severe_H0, Fatal0, R_Mild0, R_Severe0, R_Fatal0, intervention = getSolution(
            dfdt, pop, t0, days, group)
        S, E, I, R, Mild, Severe, Severe_H, Fatal, R_Mild, R_Severe, R_Fatal = S + S0, E + E0, I + I0, R + R0, Mild + Mild0, Severe + Severe0, Severe_H + Severe_H0, Fatal + Fatal0, R_Mild + R_Mild0, R_Severe + R_Severe0, R_Fatal + R_Fatal0

    return np.array(S[:days]), np.array(E[:days]), np.array(I[:days]), np.array(R[:days]), np.array(
        Mild[:days]), np.array(Severe[:days]), np.array(Severe_H[:days]), np.array(Fatal[:days]), np.array(
        R_Mild[:days]), np.array(R_Severe[:days]), np.array(R_Fatal[:days]), intervention


def merge_dict(param, a):
    test_list = param + a
    res_list = []
    final = []
    for i in range(len(test_list)):
        if test_list[i] not in test_list[i + 1:]:
            res_list.append(test_list[i])
    newlist = sorted(res_list, key=lambda k: k['intervention_day'])
    # print(newlist)
    i, j = 0, 1
    while i < len(newlist) and j < len(newlist):
        # print(newlist[i]['intervention_day'],newlist[j]['intervention_day'])
        if newlist[i]['intervention_day'] == newlist[j]['intervention_day'] and i != j:
            newlist[i].update(newlist[j])
            newlist.remove(newlist[j])
        else:
            i += 1

    # print('hi')
    return newlist


class GlobalConfig:
    def __init__(self, pop=7000000,
                 t0=0,
                 ):
        self.pop = pop
        self.t0 = t0

        self.age_group_dict = {}

    class age_group_params_template:

        def __init__(self, D_incubation=5.2,
                     D_infectious=2.9,
                     pop_frac=0.25,
                     I0=1,
                     R0=0,
                     E0=0,
                     rate_frac=1,
                     delI=0,
                     delS=0,
                     delR=0,
                     delE=0,
                     Mild0=0,
                     Severe0=0,
                     Severe_H0=0,
                     Fatal0=0,
                     R_Mild0=0,
                     R_Severe0=0,
                     R_Fatal0=0,
                     D_death=32,
                     P_SEVERE=0.2,
                     D_hospital_lag=5,
                     D_recovery_severe=28.6,
                     D_recovery_mild=11.1,
                     CFR=0.02,
                     rates=2.2,
                     intervention_day=0,
                     S0=-1,  # Put S0 = -1 if not adding value explicitely . Then S0 = Pop -I0-R0-E0
                     param=[{"intervention_day": 70, "rate_frac": 0.2}, {"intervention_day": 120, "rate_frac": 0.65},
                            {"intervention_day": 150, "rate_frac": 0.2}],
                     nodal_param_change=[{}]
                     ):
            self.D_incubation = D_incubation
            self.D_infectious = D_infectious
            self.pop_frac = pop_frac
            self.I0 = I0
            self.R0 = R0
            self.E0 = E0
            self.S0 = S0
            self.delI = delI
            self.delR = delR
            self.delS = delS
            self.delE = delE
            self.rate_frac = rate_frac
            self.Mild0 = Mild0
            self.Severe0 = Severe0
            self.Severe_H0 = Severe_H0
            self.Fatal0 = Fatal0
            self.R_Mild0 = R_Mild0
            self.R_Severe0 = R_Severe0
            self.R_Fatal0 = R_Fatal0
            self.D_death = D_death
            self.P_SEVERE = P_SEVERE
            self.D_hospital_lag = D_hospital_lag
            self.D_recovery_severe = D_recovery_severe
            self.D_recovery_mild = D_recovery_mild
            self.CFR = CFR
            self.rates = rates
            self.intervention_day = intervention_day
            self.param = param
            self.nodal_param_change = nodal_param_change

    def instantiate_with_local_config(self,
                                      local_config={"age_groups": {"0-20": {}, "21-40": {}, "41-60": {}, "61+": {}}}):
        local_config_params = {}
        if 'pop' in local_config.keys():
            setattr(self, 'pop', local_config['pop'])
        if 't0' in local_config.keys():
            setattr(self, 't0', local_config['t0'])
        if 'age_groups' in local_config.keys():
            age_groups = local_config['age_groups'].keys()
            age_group_params = {}
            for age_group in age_groups:
                # age_group_params.update({age_group:type("AgeGroup"+age_group,(self.age_group_params_template,),{})})
                obj = type("AgeGroup" + age_group, (self.age_group_params_template,), {})()
                for k, v in local_config['age_groups'][age_group].items():
                    setattr(obj, k, v)
                self.age_group_dict.update({age_group: obj.__dict__})


def network_epidemic_calc(city, days=200):
    S, E, I, R, Mild, Severe, Severe_H, Fatal, R_Mild, R_Severe, R_Fatal = np.array([0] * days), np.array(
        [0] * days), np.array([0] * days), np.array([0] * days), np.array([0] * days), np.array([0] * days), np.array(
        [0] * days), np.array([0] * days), np.array([0] * days), np.array([0] * days), np.array([0] * days)
    if city == "India":
        for local_config in node_json_list:
            # import local params json file to instantiate objects
            E0, Fatal0, I0, Mild0, R0, R_Fatal0, R_Mild0, R_Severe0, S0, Severe0, Severe_H0, intervention, node_config = get_SEIR(
                days, local_config)
            S, E, I, R, Mild, Severe, Severe_H, Fatal, R_Mild, R_Severe, R_Fatal = S + S0, E + E0, I + I0, R + R0, Mild + Mild0, Severe + Severe0, Severe_H + Severe_H0, Fatal + Fatal0, R_Mild + R_Mild0, R_Severe + R_Severe0, R_Fatal + R_Fatal0
        t0 = 0
    else:
        local_config = next(obj for obj in node_json_list  if obj["city"]==city)
        E, Fatal, I, Mild, R, R_Fatal, R_Mild, R_Severe, S, Severe, Severe_H, intervention, node_config = get_SEIR(days,
                                                                                                                   local_config)
        t0 = node_config.t0

    return plot_graph(np.arange(days) + 1, S, E, I, R, Mild, Severe, Severe_H, Fatal, R_Mild, R_Severe, R_Fatal,
                      intervention, days, t0, city)


def get_SEIR(days, local_config):
    node_config = GlobalConfig()
    node_config.instantiate_with_local_config(local_config)
    # print('City Config File is as follows: \n', node_config.__dict__)
    S0, E0, I0, R0, Mild0, Severe0, Severe_H0, Fatal0, R_Mild0, R_Severe0, R_Fatal0, intervention = epidemic_calculator(
        node_config, days)
    return E0, Fatal0, I0, Mild0, R0, R_Fatal0, R_Mild0, R_Severe0, S0, Severe0, Severe_H0, intervention, node_config


network_epidemic_calc("India")
